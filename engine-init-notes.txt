DLL's depend on d3dx9_35.dll which can be installed from DX SDK 2010

DarkBasic main function:

// Load dlls and fill glob struct.
dllList = array of dlls. DBProCore.dll must be at the beginning.
dllHandles = new array of size dllList.size()
for (int i = 0; i < dllList.size(); ++i) {
    dllHandles[i] = LoadLibrary(dllList[i]);

    if (dllList[i] == "DBProCore.dll") {
        // CORE Pass Ptrs To Core (Error Handling, Data Statements)
        g_CORE_PassCmdLinePtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassCmdLineHandlerPtr@@YAXPAX@Z" );
        g_CORE_PassErrorPtr				= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassErrorHandlerPtr@@YAXPAX@Z" );
        g_CORE_PassEscapePtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassEscapePtr@@YAXPAX@Z" );
        g_CORE_PassBreakOutPtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassBreakOutPtr@@YAXPAX@Z" );
        g_CORE_PassStructurePatterns	= ( GDI_RetVoidParamLPVOIDDWORD )		GetProcAddress ( hCoreDLL, "?PassStructurePatterns@@YAXPAXK@Z" );
        g_CORE_PassDataPtrs				= ( GDI_RetVoidParamLPSTR2 )			GetProcAddress ( hCoreDLL, "?PassDataStatementPtr@@YAXPAD0@Z" );

        // CORE Display Function Calls
        g_CORE_InitDisplay		= ( GDI_RetDWORDParamDWORD4HINSTLPSTRPFN )	GetProcAddress ( hCoreDLL, "?InitDisplay@@YAKKKKKPAUHINSTANCE__@@PAD@Z" );
        g_CORE_CloseDisplay		= ( GDI_RetDWORDParamVoidPFN )			GetProcAddress ( hCoreDLL, "?CloseDisplay@@YAKXZ" );
        g_CORE_PassDLLs			= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?PassDLLs@@YAXXZ" );
        g_CORE_ConstructDLLs	= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?ConstructDLLs@@YAXXZ" );
        g_CORE_GetGlobPtr		= ( GDI_RetDWORDParamVoidPFN )			GetProcAddress ( hCoreDLL, "?GetGlobPtr@@YAKXZ" );

        // CORE Memory Management Function Calls
        g_CORE_CreateVarSpace	= ( GDI_RetDWORDParamDWORDPFN )			GetProcAddress ( hCoreDLL, "?CreateVariableSpace@@YAKK@Z" );
        g_CORE_DeleteVarSpace	= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?DeleteVariableSpace@@YAXXZ" );
        g_CORE_CreateDataSpace	= ( GDI_RetDWORDParamDWORDPFN )			GetProcAddress ( hCoreDLL, "?CreateDataSpace@@YAKK@Z" );
        g_CORE_DeleteDataSpace	= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?DeleteDataSpace@@YAXXZ" );
        g_CORE_DeleteVarItem	= ( GDI_RetVoidParamDWORDPTRPFN )		GetProcAddress ( hCoreDLL, "?DeleteSingleVariableAllocation@@YAXPAK@Z" );
        g_CORE_UnDim			= ( GDI_RetVoidParamDWORDPTRPFN )		GetProcAddress ( hCoreDLL, "?UnDimDD@@YAKK@Z" );
        g_CORE_SyncRefresh		= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?Sync@@YAXXZ" );

        // CORE SEcurity Functions
        g_CORE_GetSecurityCode	= ( GDI_RetIntParamVoidPFN )			GetProcAddress ( hCoreDLL, "?GetSecurityCode@@YAHXZ" );
        g_CORE_WipeSecurityCode	= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?WipeSecurityCode@@YAXXZ" );

        // Get GlobStruct Ptr for rest of DLL loading
        if(g_CORE_GetGlobPtr) g_pGlob = (GlobStruct*)g_CORE_GetGlobPtr();
    }

    g_pGlob->g_GFX = plugin_handle["DBProSetupDebug.dll"]
    g_pGlob->g_Basic2D = plugin_handle["DBProBasic2DDebug.dll"]
    g_pGlob->g_Text = plugin_handle["DBProTextDebug.dll"]
    g_pGlob->g_Transforms = plugin_handle["DBProTransformsDebug.dll"]
    g_pGlob->g_Sprites = plugin_handle["DBProSpritesDebug.dll"]
    g_pGlob->g_Image = plugin_handle["DBProImageDebug.dll"]
    g_pGlob->g_Input = plugin_handle["DBProInputDebug.dll"]
    g_pGlob->g_System = plugin_handle["DBProSystemDebug.dll"]
    g_pGlob->g_Sound = plugin_handle["DBProSoundDebug.dll"]
    g_pGlob->g_Music = plugin_handle["DBProMusicDebug.dll"]
    g_pGlob->g_File = plugin_handle["DBProFileDebug.dll"]
    g_pGlob->g_FTP = plugin_handle["DBProFTPDebug.dll"]
    g_pGlob->g_Memblocks = plugin_handle["DBProMemblocksDebug.dll"]
    g_pGlob->g_Animation = plugin_handle["DBProAnimationDebug.dll"]
    g_pGlob->g_Bitmap = plugin_handle["DBProBitmapDebug.dll"]
    g_pGlob->g_Multiplayer = plugin_handle["DBProMultiplayerDebug.dll"]
    g_pGlob->g_Camera3D = plugin_handle["DBProCameraDebug.dll"];
    g_pGlob->g_Light3D = plugin_handle["DBProLightDebug.dll"];
    g_pGlob->g_Matrix3D = plugin_handle["DBProMatrixDebug.dll"];
    g_pGlob->g_Basic3D = plugin_handle["DBProBasic3DDebug.dll"];
    g_pGlob->g_World3D = plugin_handle["DBProWorld3DDebug.dll"];
    g_pGlob->g_Q2BSP = plugin_handle["DBProQ2BSPDebug.dll"];
    g_pGlob->g_OwnBSP = plugin_handle["DBProOwnBSPDebug.dll"];
    g_pGlob->g_BSPCompiler = plugin_handle["DBProBSPCompilerDebug.dll"];
    g_pGlob->g_Particles = plugin_handle["DBProParticlesDebug.dll"];
    g_pGlob->g_PrimObject = plugin_handle["DBProPrimObjectDebug.dll"];
    g_pGlob->g_Vectors = plugin_handle["DBProVectorsDebug.dll"];
    g_pGlob->g_LODTerrain = plugin_handle["DBProLODTerrainDebug.dll"];
    g_pGlob->g_CSG = plugin_handle["DBProCSGDebug.dll"];
}

// Initialise EXE directory.
memset ( g_pGlob->pEXEUnpackDirectory, 0, _MAX_PATH );
strcpy(g_pGlob->pEXEUnpackDirectory, m_pUnpackFolderName);
g_pGlob->ppEXEAbsFilename = (DWORD)m_pAbsoluteAppFile;


        g_CORE_PassCmdLinePtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassCmdLineHandlerPtr@@YAXPAX@Z" );
        g_CORE_PassErrorPtr				= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassErrorHandlerPtr@@YAXPAX@Z" );
        g_CORE_PassEscapePtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassEscapePtr@@YAXPAX@Z" );
        g_CORE_PassBreakOutPtr			= ( GDI_RetVoidParamLPVOID )			GetProcAddress ( hCoreDLL, "?PassBreakOutPtr@@YAXPAX@Z" );
        g_CORE_PassStructurePatterns	= ( GDI_RetVoidParamLPVOIDDWORD )		GetProcAddress ( hCoreDLL, "?PassStructurePatterns@@YAXPAXK@Z" );
        g_CORE_InitDisplay		= ( GDI_RetDWORDParamDWORD4HINSTLPSTRPFN )	GetProcAddress ( hCoreDLL, "?InitDisplay@@YAKKKKKPAUHINSTANCE__@@PAD@Z" );
        g_CORE_CloseDisplay		= ( GDI_RetDWORDParamVoidPFN )			GetProcAddress ( hCoreDLL, "?CloseDisplay@@YAKXZ" );
        g_CORE_PassDLLs			= ( GDI_RetVoidParamVoidPFN )			GetProcAddress ( hCoreDLL, "?PassDLLs@@YAXXZ" );

// Prepare display.
g_CORE_PassCmdLinePtr((LPVOID)pCmdLine);
g_CORE_PassErrorPtr((LPVOID)&m_dwRuntimeErrorDWORD);
g_CORE_PassEscapePtr((LPVOID)&g_dwEscapeValueMem);
g_CORE_PassBreakOutPtr((LPVOID)&g_dwBreakOutPosition);
// U71 - also pass in structure pattern qty+ptr
g_CORE_PassStructurePatterns((LPVOID)m_pUsertypeStringPatternArray, m_dwUsertypeStringPatternQuantity);
g_CORE_PassDLLs();

g_CORE_InitDisplay ( m_dwInitialDisplayMode, m_dwInitialDisplayWidth, m_dwInitialDisplayHeight, m_dwInitialDisplayDepth, hInstance, m_pInitialAppName)

// Call PassCoreData on each user DLL
for (int i = 0; i < dllList[i]; ++i) {
    DLL_PassCore g_DLL_PassCoreData;
    g_DLL_PassCoreData = ( DLL_PassCore ) GetProcAddress ( hDLLMod[dllindex], "?ReceiveCoreDataPtr@@YAXPAX@Z" );
    if (!g_DLL_PassCoreData)
        g_DLL_PassCoreData = ( DLL_PassCore )GetProcAddress(hDLLMod[dllindex], "ReceiveCoreDataPtr");
    if(g_DLL_PassCoreData)	g_DLL_PassCoreData( g_pGlob );
}

// Run application
runApplication()

// Shutdown
if(g_CORE_CloseDisplay) g_CORE_CloseDisplay();