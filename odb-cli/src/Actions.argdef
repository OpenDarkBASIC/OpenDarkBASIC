%source-preamble {
#include "odb-cli/Actions.argdef.hpp"
#include "odb-cli/AST.hpp"
#include "odb-cli/Banner.hpp"
#include "odb-cli/BuildInfo.hpp"
#include "odb-cli/Commands.hpp"
#include "odb-cli/Codegen.hpp"
#include "odb-cli/Log.hpp"
#include "odb-cli/SDK.hpp"
//#include "odb-cli/Warnings.hpp"
#include <cstdarg>

extern "C" {
#include "odb-sdk/cli_colors.h"
#include "odb-sdk/log.h"
}

#define ADG_FPRINTF(fp, fmt, ...) \
    log_raw(fmt, __VA_ARGS__)
#define ADG_FPRINTF_COLOR(print_func, fp, color, fmt, ...) do { \
        log_raw(color); \
        log_raw(fmt, __VA_ARGS__); \
    } while (0)
#define ADG_COLOR_RESET    COL_RESET
#define ADG_COLOR_HEADING1 FGB_WHITE
#define ADG_COLOR_HEADING2 FGB_YELLOW
#define ADG_COLOR_LONGOPT  FGB_GREEN
#define ADG_COLOR_SHORTOPT FGB_YELLOW
#define ADG_COLOR_ARG      FGB_YELLOW
#define ADG_COLOR_ERROR    FGB_RED

#define ADG_HELP_EXAMPLES \
    printHelpExamples();

static void printHelpExamples();
%}

%action-table {
###############################################################################
section global:
  info: Initial setup and version information
  
  version():
    help: Prints the version.
    func: printVersion

  commit-hash():
    help: Prints the git commit hash.
    func: printCommitHash

  no-banner(b):
    help: Don't print the cool art banner.
    func: disableBanner

  color():
    help: Enables color escape sequences for all messages. Color is enabled by
          default unless the output is piped.
    func: enableColor
  
  no-color(c):
    help: Disables color escape sequences for all messages. Color is enabled by
          default unless the output is piped.
    func: disableColor

  print-banner:
    func: printBanner
    runafter: version, commit-hash, no-banner, no-color, color

  help(h):
    help: Print this help text, or print help about a specific section, or print
          everything by specifying 'all'.
    args: [all|section]
    func: printHelp
    runafter: print-banner

###############################################################################
#section warnings:
#  info: Configure compiler warnings
#
#  warn(W)[warn-test]:
#    help: This helper command lets you use the -Wname and -Wno-name syntax for
#          warnings.
#    func: warn
#    args: <name>
#
#  warn-test():
#    help: Test
#    func: warnTest
#    args: <1|0>
#    runafter: global

###############################################################################
section sdk:
  info: Configure the SDK, plugins and commands

  sdk-root():
    help: Tells the compiler where to look for plugins, help files, and other
          necessary information. In the case of DBPro this should be a path to
          the DBPro installation directory (e.g. "C:\Program Files\Dark Basic Professional Online").
          In the case of ODB this should be a path to the folder called "odb-sdk".
    args: <path>
    func: setSDKRootDir
    runafter: global

  sdk-type():
    help: Specify if the SDK is the original DBPro SDK, or if it is the ODB
          reimplementation. --sdk-root will autodetect the type so this is
          usually not needed. If specified, it will override the autodetected
          value.
    args: <odb|dbpro>
    func: setSDKType
    runafter: sdk-root

  plugins():
    help: Add additional directories to scan for thirdparty plugins. Note that
          ODB and DBPro plugins are not compatible with each other.
    args: <path|file> [path|file...]
    func: setAdditionalPluginsDir
    runafter: global

  setup-sdk:
    func: setupSDK
    runafter: sdk-root, sdk-type, plugins

  print-sdk-root():
    help: Prints the location of the SDK
    func: printSDKRootDir
    runafter: setup-sdk

  load-commands:
    func: loadCommands
    runafter: setup-sdk

  dump-commands():
    help: Dump all command names in alphabetical order. The default file is stdout.
    args: [file]
    func: dumpCommandNames
    runafter: load-commands

  dump-commands-json():
    help: Dump all commands (and their type/argument info) to JSON format. The
          default file is stdout.
    args: [file]
    func: dumpCommandsJSON
    runafter: load-commands

  dump-commands-ini():
    help: Dump all commands (and their type/argument info) to INI format. The
          default file is stdout.
    args: [file]
    func: dumpCommandsINI
    runafter: load-commands


###############################################################################
section parser:
  info: .dba and .dbpro file related options

  dba():
    help: Parse DBA source file(s). The first file listed will become the 'main'
          file, i.e. where execution starts. If no files are listed, then the
          source is read from stdin.
    args: [file...]
    func: parseDBA
    runafter: load-commands

  dbpro()[dba]:
    help: Load DBPro project (.dbpro) and parse all DBA files in it.
    args: <file>
    func: parseDBPro
    runafter: load-commands

  input(i)[dba, dbpro]:
    help: Specify an input. Can be a .dbpro file or a list of .dba files.
    args: <file> [files...]
    func: autoDetectInput
    runafter: load-commands

  dump-ast():
    help: Dump AST to Graphviz DOT format. The default file is stdout.
    args: [file]
    func: dumpASTDOT
    runafter: dba, dbpro, input
    requires: dba

  #dump-ast-json():
  #  help: Dump AST to JSON format. The default file is stdout.
  #  args: [file]
  #  func: dumpASTJSON
  #  runafter: dba, dbpro, input

###############################################################################
section codegen:
  info: Optimization, target arch and platform settings, and output type settings

  arch():
    help: Specify the output architecture if the output type is an executable
          or object file. Defaults to 'x86_64' for the ODB SDK, or 'i386' for
          the DBPro SDK.
    args: <i386|x86_64|aarch64>
    func: setArch
    runafter: global

  platform():
    help: Specify the output platform if the output type is an executable or
          object file. Defaults to the current platform for the ODB SDK, or
          'windows' for the DBPro SDK.
    args: <windows|macos|linux>
    func: setPlatform
    runafter: global

  dump-ir():
    help: Dump LLVM IR to output.
    args: [file]
    func: dumpIR

  output(o):
    help: Generate output. If no filename is given then output is written to
          stdout.
    args: <file>
    func: output
    runafter: parser
    requires: dba
%}

%source-postamble {
static void printHelpExamples()
{
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_HEADING1, "%s", "Examples:\n");

    // Compile dba to exe
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_HEADING2, "%s", "  Compiling a .dba file to an executable\n");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "    %s ", programName_.c_str());
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--dba");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " source.dba ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--output");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " program.exe\n");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "    %s ", programName_.c_str());
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--dba");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " source1.dba source2.dba ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--output");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " program.exe\n\n");

    // Using the DBPro SDK
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_HEADING2, "%s", "  Using the DBPro SDK instead of ODB\n");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "    %s ", programName_.c_str());
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--sdk-type");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " dbpro ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--sdk-root");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " <");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_ARG, "%s", "path/to/dbp/installation");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", "> ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--dba");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " source.dba ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--output");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " program.exe\n\n");

    // Rendering
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_HEADING2, "%s", "  Converting your program into a graph\n");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "    %s ", programName_.c_str());
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--dba");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " source.dba ");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_LONGOPT, "%s", "--dump-ast");
    ADG_FPRINTF_COLOR(ADG_FPRINTF, stdout, ADG_COLOR_RESET, "%s", " | dot -Tx11\n\n");
}
%}
