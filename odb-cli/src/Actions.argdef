###############################################################################
section global:
  no-banner(b):
    help: Don't print the cool art banner.
    func: disableBanner

  color(c):
    help: Enables color escape sequences for all messages. Color is enabled by
          default unless the output is piped.
    func: enableColor

  no-color(c):
    help: Disables color escape sequences for all messages. Color is enabled by
          default unless the output is piped.
    func: disableColor

  print-banner:
    func: printBanner
    runafter: no-banner, color, no-color

  help(h):
    help: Print this help text, or print help about a specific section, or print
          everything by specifying 'all'.
    args: [all|section...]
    func: printHelp
    runafter: print-banner

  version():
    help: Prints the version.
    runafter: help
    func: printVersion

  commit-hash():
    help: Prints the git commit hash.
    func: printCommitHash
    runafter: help

###############################################################################
section sdk:
  sdk-root():
    help: Tells the compiler where to look for plugins, help files, and other
          necessary information. In the case of DBPro this should be a path to
          the DBPro installation directory (e.g. "C:\Program Files\Dark Basic Professional Online").
          In the case of ODB this should be a path to the folder called "odb-sdk".
    args: <path>
    func: setSDKRootDir
    runafter: global

  sdk-type():
    help: Specify if the SDK is the original DBPro SDK, or if it is the ODB
          reimplementation. --sdkroot will autodetect the type so this is
          usually not needed. If specified, it will override the autodetected
          value.
    args: <odb|dbpro>
    func: setSDKType
    runafter: sdkroot

  plugins():
    help: Add additional directories to scan for thirdparty plugins. Note that
          ODB and DBPro plugins are not compatible with each other.
    args: <path|file> [path|file...]

  init-sdk:
    func: initSDK
    runafter: sdkroot, sdktype, plugins

  print-sdk-root():
    help: Prints the location of the SDK
    func: printSDKRootDir

  load-commands:
    func: loadCommands
    runafter: init-sdk

  dump-commands():
    help: Dump all command names in alphabetical order. The default file is stdout.
    args: [file]
    func: dumpCommandNames
    runafter: load-commands

  dump-commands-json():
    help: Dump all commands (and their type/argument info) to JSON format. The
          default file is stdout.
    args: [file]
    func: dumpCommandsJSON
    runafter: load-commands

  dump-commands-ini():
    help: Dump all commands (and their type/argument info) to INI format. The
          default file is stdout.
    args: [file]
    func: dumpCommandsINI
    runafter: load-commands

###############################################################################
section parser:
  init-command-matcher:
    func: initCommandMatcher
    runafter: load-commands

  dba():
    help: Parse DBA source file(s). The first file listed will become the 'main'
          file, i.e. where execution starts.
    args: <file> [files...]
    func: parseDBA
    runafter: init-command-matcher

  dbpro()[dba]:
    help: Load DBPro project (.dbpro) and parse all DBA files in it.
    args: <file>
    func: parseDBPro
    runafter: init-command-matcher

  input(i)[dba, dbpro]:
    help: Specify an input. Can be a .dbpro file or a list of .dba files.
    args: <file> [files...]
    func: autoDetectInput
    runafter: init-command-matcher

  dump-ast-dot():
    help: Dump AST to Graphviz DOT format. The default file is stdout.
    args: [file]
    func: dumpASTDOT
    runafter: dba, dbpro, input

  dump-ast-json():
    help: Dump AST to JSON format. The default file is stdout.
    args: [file]
    func: dumpASTJSON
    runafter: dba, dbpro, input

###############################################################################
section codegen:
  arch():
    help: Specify the output architecture if the output type is an executable
          or object file. Defaults to 'x86_64' for the ODB SDK, or 'i386' for
          the DBPro SDK.
    args: <i386|x86_64|aarch64>
    func: setArch
    runafter: global

  platform():
    help: Specify the output platform if the output type is an executable or
          object file. Defaults to the current platform for the ODB SDK, or
          'windows' for the DBPro SDK.
    args: <windows|macos|linux>
    func: setPlatform

  output-type():
    help: Specify the file type generated by the --output flag. Can be either
          an executable, object file, LLVM IR or LLVM bitcode. Defaults to 'obj'.
    args: <obj|exe|llvm-ir|llvm-bc>
    func: setOutputType
    runafter: global

  output(o):
    help: Generate output. If no filename is given then output is written to
          stdout.
    args: [file]
