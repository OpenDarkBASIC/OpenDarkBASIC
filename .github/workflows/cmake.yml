name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    env:
      CXX: /usr/bin/g++-10
      CC: /usr/bin/gcc-10

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build bison
      run: wget http://ftp.gnu.org/gnu/bison/bison-3.7.tar.gz && tar -zxvf bison-3.7.tar.gz && pushd bison-3.7/ && ./configure && sudo make install && popd

    - name: Update packages
      run: sudo apt update && sudo apt --only-upgrade install flex

    - name: Versions
      run: bison --version; flex --version

    - name: Debugging with tmate
      # You may pin to the exact commit or the version.
      # uses: mxschmitt/action-tmate@04c73044e0fd6cbed37de0cbdd0321d8b4359775
      uses: mxschmitt/action-tmate@v3.1
      with:
        # If apt should be executed with sudo or without
        sudo: true # optional, default is true

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: VERBOSE=1 cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: bin/odbc_tests
