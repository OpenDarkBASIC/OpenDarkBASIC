%{
    #include <stddef.h>  /* size_t */
    #include <string.h>  /* strcmp */

    #include "odb-compiler/parsers/db/Parser.y.h"        /* for list of token values */
    #include "odb-compiler/parsers/db/KeywordToken.hpp"  /* Implementing this interface */

    namespace odb {
    namespace db {
%}

%readonly-tables
%global-table
%ignore-case
%language=C++
%struct-type
%define class-name KeywordsHash
%define hash-function-name hash
%define lookup-function-name lookup

struct KeywordsHashResult { const char* name; dbtokentype value; };

%%
and,              TOK_LAND
as,               TOK_AS
boolean,          TOK_BOOLEAN
break,            TOK_BREAK
byte,             TOK_BYTE
case,             TOK_CASE
dec,              TOK_DEC
dim,              TOK_DIM
default,          TOK_DEFAULT
do,               TOK_DO
double,           TOK_DOUBLE
dword,            TOK_DWORD
else,             TOK_ELSE
elseif,           TOK_ELSEIF
endcase,          TOK_ENDCASE
endfunction,      TOK_ENDFUNCTION
endif,            TOK_ENDIF
endselect,        TOK_ENDSELECT
endtype,          TOK_ENDTYPE
endwhile,         TOK_ENDWHILE
exitfunction,     TOK_EXITFUNCTION
float,            TOK_FLOAT
for,              TOK_FOR
function,         TOK_FUNCTION
global,           TOK_GLOBAL
gosub,            TOK_GOSUB
goto,             TOK_GOTO
if,               TOK_IF
inc,              TOK_INC
integer,          TOK_INTEGER
local,            TOK_LOCAL
loop,             TOK_LOOP
mod,              TOK_MOD
next,             TOK_NEXT
not,              TOK_LNOT
or,               TOK_LOR
repeat,           TOK_REPEAT
return,           TOK_RETURN
select,           TOK_SELECT
step,             TOK_STEP
string,           TOK_STRING
then,             TOK_THEN
to,               TOK_TO
type,             TOK_TYPE
until,            TOK_UNTIL
while,            TOK_WHILE
word,             TOK_WORD
xor,              TOK_LXOR
%%

// ----------------------------------------------------------------------------
const KeywordToken::Result* KeywordToken::lookup(const std::string& keyword)
{
    const KeywordsHashResult* result =
        KeywordsHash::lookup(keyword.c_str(), keyword.length());
    return reinterpret_cast<const KeywordToken::Result*>(result);
}

}  // namespace db
}  // namespace odb
